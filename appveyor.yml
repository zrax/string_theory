version: '2.1.{build}'

environment:
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      TARGET: MSVC
      VisualStudioVersion: 10.0
      CMAKE_GENERATOR: Visual Studio 10 2010
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      TARGET: MSVC
      VisualStudioVersion: 11.0
      CMAKE_GENERATOR: Visual Studio 11 2012
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
      TARGET: MSVC
      VisualStudioVersion: 12.0
      CMAKE_GENERATOR: Visual Studio 12 2013
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      TARGET: MSVC
      VisualStudioVersion: 14.0
      CMAKE_GENERATOR: Visual Studio 14 2015
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      TARGET: MSVC
      VisualStudioVersion: 15.0
      CMAKE_GENERATOR: Visual Studio 15 2017
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      TARGET: MSVC
      VisualStudioVersion: 15.0
      CMAKE_GENERATOR: Visual Studio 15 2017 Win64
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      TARGET: MinGW
      CMAKE_GENERATOR: MinGW Makefiles
      MINGW_PREFIX: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      TARGET: MinGW
      CMAKE_GENERATOR: MinGW Makefiles
      MINGW_PREFIX: C:\mingw-w64\x86_64-7.3.0-posix-seh-rt_v5-rev0\mingw64

install:
  # CMake's MinGW generator doesn't play nice with git's sh.exe
  - ps: Get-Command sh.exe -All | Remove-Item

build_script:
  - mkdir build
  - cd build
  - if [%TARGET%]==[MinGW] (
      set "PATH=%MINGW_PREFIX%\bin;%PATH%" )
  - cmake -G "%CMAKE_GENERATOR%" -DBUILD_TYPE=Debug -DST_BUILD_TESTS=ON ..
  - if [%TARGET%]==[MSVC] (
      cmake --build . --config Debug &&
      cmake --build . --config Debug --target RUN_TESTS )
  - if [%TARGET%]==[MinGW] (
      mingw32-make &&
      mingw32-make test )
